times1(){ 
local num="$1"
local char="${2:-.}"
local i=0
local res=0

while [ $i -lt $num ];do
    #random 2
    #res=$?
    #[ $res -eq 0 ] && echo -n Z || echo -n z 
    echo -n "$char"
    let    'i+=1'
done
}

print_color_n () 
{ 
    if [ $# -gt 1 ];then
        local color=$1
        shift
        local args="${@:-}"
    echo -en 1>&2 "\x1B[01;${color}m[*]\x1B[0m $args"
fi
}

print_test(){
print toilet hi
}
print_g_test(){
#    print_g gay toilet sdf lsd sld 
print color 32 ok now
    }
#banner : big : block : bubble : digital : ivrit : lean : mini : mnemonic : script : shadow : slant : small : smscript : smshadow : smslant : standard : term :

print_func_test(){
print func
}
print_g(){
    (
    [ $# -gt 1 ] || { echo "$@";return; }  
    local type="$1"
        #local sub_type="$2"
        #shift
        shift
        local str="${@:-}"
        local cmd=''

#depend
#echo "type: $type "
        





    case "$type" in
        metal)
            toilet --metal "$str"
            ;;
        gay)
            toilet --gay "$str"
            ;;

        notify-send)
            notify-send $str
            ;;
        xcowsay)
            xcowsay $str
            ;;
        toilet)
            toilet "$str"
            ;;
        figlet)
            figlet "$str"
            ;;
        pv)
            pv1 "$str"
            ;;
        **)
str="$( who_is_it )"
        print color 31 "[type] $type - not exist - fallback to echo"
            #echo 'showfigfont?'
            print color 31 "$str"
            ;;
        esac


        )

            return 1
}

printn(){
    #set -o nounset
    #use times1
    [ $# -gt 0 ] || { echo "$@";return; }  
    local type="$1"
        shift
        local str="$@"
        local cmd=''
    case "$type" in
        func)
       #set -o functrace 
        local funcname="${FUNCNAME[2]}" #caller is 2 funcs before
        print line "$funcname:  $str"

       #set +o functrace 
            ;;

        trace)

trace $str
            ;;
        ok)
            print_color_n  32 " $str"
            ;;
        color)
            cmd="print_color_n $str"
            $cmd
            ;;
        error)
            print_color_n  31 " $str"
            ;;
        line)
        if [ -n "$str" ];then
local str_res=$(echo "$str" | wc -c )
local str_times=$( times1 "$str_res" _ )
            echo -e 1>&2 "                ${str_times}"
            
            echo -en 1>&2 '_______________/'
            echo -en 1>&2  "$str "
            echo -e 1>&2 '\________________'
            else

            echo -en 1>&2 '_________________'

            echo -e 1>&2 '_________________'
            fi

            ;;
        shlvl)
            print_color_n 33 "[SHLVL] $SHLVL"
            ;;
        caller)
            str="${str:-}"
            print_color_n 36 "[CALLER] $str"
        #print_color_n 36 "[CALLER] $str"
            ;;
        fortune)
            fortune
            ;;
        warning)
            print_color_n  33 "[WARNING!] $str"
            ;;
        pending)
            print_color_n  34 "[PENDING] $str"
            ;;
 
        **)
            echo 1>&2 "$type $str"
            ;;
        esac
}
print(){
   #        CALL DIRECTLY printn FOR AVOIDING endl 
    local    args=($@)
        local    cmd="${args[@]}"
        printn $cmd
        echo
}
export -f print
export -f print_g
export -f printn
export -f print_color_n 
export -f times1


