trap_err(){
  use print
  print func
  print error
  $str_caller
}
trap_exit(){
  local res=${1:-$?}
  use print
  use indicator
  print func
  indicator $res
  exit 0
}

source_more_funcs(){
  echo skipping: source $dir_library_proto/MORE/funcs.cfg
}

export_vars(){
  export dir_library_proto=`where_am_i $BASH_SOURCE`
  export cmd_trap_err='trap trap_err ERR'
  export cmd_trap_exit='trap trap_exit EXIT'
  export gxmessage1='gxmessage -file /tmp/err -title cmd_err -sticky -ontop -timeout 10'
  export str_caller='eval echo $( caller )'
  export PATH=$PATH:/usr/local/bin
}

where_am_i () 
{ 
  local file=${1:-"${BASH_SOURCE[1]}"};
  local rpath=$(readlink -m $file);
  local rcommand=${rpath##*/};
  local str_res=${rpath%/*};
  local dir_self="$( cd $str_res  && pwd )";
  echo "$dir_self"
}



we_are_ok(){
  test $1 -eq 0 || { echo 1>&2 not ok; exit 1; }
}
use_test(){
  use cat1
  use cat3
}



find_test(){
  find cat1
  find cat3
}
find(){
  set -o nounset
  local str="$1"
  local type="${2:-cfg}"
  local file="$dir_library_proto/BANK/${str}.${type}"
  local res=1
  #assert file_exist $file

  if [ -f "$file"  ] || [ -L "$file" ];then
    res=0
    echo $file
  else
    echo 1>&2 "[ERROR] file not found: $file"
  fi
  return $res
}
use_many(){
  for item in $@;do
    use $item
  done
}

use(){

  local str="$1"
  local type="${2:-cfg}"
  local cmd
  local res
  local file
  ( exec &>/dev/null; set -o pipefail; type "$str" | grep function ) 
  res=$?
  if [ $res -eq 0 ];then
    echo 1>&2 -n "."
    #[already loaded] $str"
  else
    file=$( find $str $type )
    res=$?
    echo 1>&2 res: $res 
    we_are_ok "$res"
    if [ "$type" = cfg ];then
      cmd="source $file"
    elif [ "$type" = sh ];then
      cmd="export builtin_${str}=$file"
    else
      echo 1>&2 "[ERROR] no handler for type: $type"
      return 1
    fi
    echo 1>&2 "[cmd] $cmd"
    eval "$cmd"

  fi

}
use_sh(){
  local str="$1"
  commander use $str sh
}
$cmd_trap_err
$cmd_trap_exit

export -f use_sh
export -f we_are_ok
export -f use
export -f find
export -f use_many
export -f trap_err
export -f trap_exit

#export -f export_vars
export_vars

#source_more_funcs
#cmd=init_lib
#echo 1>&2 $cmd
#eval "$cmd"
